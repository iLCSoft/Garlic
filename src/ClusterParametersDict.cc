//
// File generated by /opt/exp_soft/ilc/LOCAL_LLR/ilcsoft/v01-06/root/5.16.00/bin/rootcint at Wed Jul 21 12:27:02 2010

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ClusterParametersDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void ClusterParameters_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_ClusterParameters(void *p = 0);
   static void *newArray_ClusterParameters(Long_t size, void *p);
   static void delete_ClusterParameters(void *p);
   static void deleteArray_ClusterParameters(void *p);
   static void destruct_ClusterParameters(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ClusterParameters*)
   {
      ::ClusterParameters *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ClusterParameters >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ClusterParameters", ::ClusterParameters::Class_Version(), "/home/llr/ilc/jeans/marlinTest/GARLIC_v2-0/include/ClusterParameters.hh", 7,
                  typeid(::ClusterParameters), DefineBehavior(ptr, ptr),
                  &::ClusterParameters::Dictionary, isa_proxy, 1,
                  sizeof(::ClusterParameters) );
      instance.SetNew(&new_ClusterParameters);
      instance.SetNewArray(&newArray_ClusterParameters);
      instance.SetDelete(&delete_ClusterParameters);
      instance.SetDeleteArray(&deleteArray_ClusterParameters);
      instance.SetDestructor(&destruct_ClusterParameters);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ClusterParameters*)
   {
      return GenerateInitInstanceLocal((::ClusterParameters*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ClusterParameters*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *ClusterParameters::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ClusterParameters::Class_Name()
{
   return "ClusterParameters";
}

//______________________________________________________________________________
const char *ClusterParameters::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ClusterParameters*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ClusterParameters::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ClusterParameters*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ClusterParameters::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ClusterParameters*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ClusterParameters::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ClusterParameters*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void ClusterParameters::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class ClusterParameters.
      TClass *R__cl = ::ClusterParameters::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "ID", &ID);
      R__insp.Inspect(R__cl, R__parent, "theta", &theta);
      R__insp.Inspect(R__cl, R__parent, "phi", &phi);
      R__insp.Inspect(R__cl, R__parent, "Etot", &Etot);
      R__insp.Inspect(R__cl, R__parent, "Etot_g", &Etot_g);
      R__insp.Inspect(R__cl, R__parent, "Etot_g_noLC", &Etot_g_noLC);
      R__insp.Inspect(R__cl, R__parent, "Etot_g_phi", &Etot_g_phi);
      R__insp.Inspect(R__cl, R__parent, "Etot_g_theta", &Etot_g_theta);
      R__insp.Inspect(R__cl, R__parent, "Etot_g_pos", &Etot_g_pos);
      R__insp.Inspect(R__cl, R__parent, "E_GeV", &E_GeV);
      R__insp.Inspect(R__cl, R__parent, "E_GeV_pre", &E_GeV_pre);
      R__insp.Inspect(R__cl, R__parent, "E_GeV_pre_noPhi", &E_GeV_pre_noPhi);
      R__insp.Inspect(R__cl, R__parent, "E_GeV_noLC", &E_GeV_noLC);
      R__insp.Inspect(R__cl, R__parent, "E_GeV_noTheta", &E_GeV_noTheta);
      R__insp.Inspect(R__cl, R__parent, "E_GeV_noPhi", &E_GeV_noPhi);
      R__insp.Inspect(R__cl, R__parent, "E_GeV_en", &E_GeV_en);
      R__insp.Inspect(R__cl, R__parent, "E_GeV_hits", &E_GeV_hits);
      R__insp.Inspect(R__cl, R__parent, "E_GeV_mix", &E_GeV_mix);
      R__insp.Inspect(R__cl, R__parent, "E_GeV_opt", &E_GeV_opt);
      R__insp.Inspect(R__cl, R__parent, "Es1", &Es1);
      R__insp.Inspect(R__cl, R__parent, "Es2", &Es2);
      R__insp.Inspect(R__cl, R__parent, "Es3", &Es3);
      R__insp.Inspect(R__cl, R__parent, "EnPs", &EnPs);
      R__insp.Inspect(R__cl, R__parent, "En1odd", &En1odd);
      R__insp.Inspect(R__cl, R__parent, "En1even", &En1even);
      R__insp.Inspect(R__cl, R__parent, "En2odd", &En2odd);
      R__insp.Inspect(R__cl, R__parent, "En2even", &En2even);
      R__insp.Inspect(R__cl, R__parent, "NPs", &NPs);
      R__insp.Inspect(R__cl, R__parent, "N1odd", &N1odd);
      R__insp.Inspect(R__cl, R__parent, "N1even", &N1even);
      R__insp.Inspect(R__cl, R__parent, "N2odd", &N2odd);
      R__insp.Inspect(R__cl, R__parent, "N2even", &N2even);
      R__insp.Inspect(R__cl, R__parent, "start", &start);
      R__insp.Inspect(R__cl, R__parent, "end", &end);
      R__insp.Inspect(R__cl, R__parent, "depth", &depth);
      R__insp.Inspect(R__cl, R__parent, "COGx", &COGx);
      R__insp.Inspect(R__cl, R__parent, "COGy", &COGy);
      R__insp.Inspect(R__cl, R__parent, "COGz", &COGz);
      R__insp.Inspect(R__cl, R__parent, "POSx", &POSx);
      R__insp.Inspect(R__cl, R__parent, "POSy", &POSy);
      R__insp.Inspect(R__cl, R__parent, "POSz", &POSz);
      R__insp.Inspect(R__cl, R__parent, "distToBiggest", &distToBiggest);
      R__insp.Inspect(R__cl, R__parent, "smallestDistToBiggest", &smallestDistToBiggest);
      R__insp.Inspect(R__cl, R__parent, "distFirstCell", &distFirstCell);
      R__insp.Inspect(R__cl, R__parent, "distToTrack", &distToTrack);
      R__insp.Inspect(R__cl, R__parent, "smallestDistToTrack", &smallestDistToTrack);
      R__insp.Inspect(R__cl, R__parent, "E9C", &E9C);
      R__insp.Inspect(R__cl, R__parent, "E4C", &E4C);
      R__insp.Inspect(R__cl, R__parent, "E1C", &E1C);
      R__insp.Inspect(R__cl, R__parent, "Chi2_long", &Chi2_long);
      R__insp.Inspect(R__cl, R__parent, "nHits", &nHits);
      R__insp.Inspect(R__cl, R__parent, "nGhostHits", &nGhostHits);
      R__insp.Inspect(R__cl, R__parent, "zone", &zone);
      R__insp.Inspect(R__cl, R__parent, "psHits", &psHits);
      R__insp.Inspect(R__cl, R__parent, "pl0Hits", &pl0Hits);
      R__insp.Inspect(R__cl, R__parent, "hitDensity", &hitDensity);
      R__insp.Inspect(R__cl, R__parent, "enDensity", &enDensity);
      R__insp.Inspect(R__cl, R__parent, "dirErr", &dirErr);
      R__insp.Inspect(R__cl, R__parent, "seedDirErr", &seedDirErr);
      R__insp.Inspect(R__cl, R__parent, "Eccentricity", &Eccentricity);
      R__insp.Inspect(R__cl, R__parent, "Width", &Width);
      R__insp.Inspect(R__cl, R__parent, "photonProb", &photonProb);
      R__insp.Inspect(R__cl, R__parent, "photonProbMult", &photonProbMult);
      R__insp.Inspect(R__cl, R__parent, "bckgrndProbMult", &bckgrndProbMult);
      R__insp.Inspect(R__cl, R__parent, "signalProbMult", &signalProbMult);
      R__insp.Inspect(R__cl, R__parent, "surroundingLayers", &surroundingLayers);
      R__insp.Inspect(R__cl, R__parent, "particleID", &particleID);
      R__insp.Inspect(R__cl, R__parent, "isReal", &isReal);
      R__insp.Inspect(R__cl, R__parent, "MLP", &MLP);
      R__insp.Inspect(R__cl, R__parent, "finalCut", &finalCut);
      R__insp.Inspect(R__cl, R__parent, "Volume", &Volume);
      R__insp.Inspect(R__cl, R__parent, "AssTo", &AssTo);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ClusterParameters(void *p) {
      return  p ? new(p) ::ClusterParameters : new ::ClusterParameters;
   }
   static void *newArray_ClusterParameters(Long_t nElements, void *p) {
      return p ? new(p) ::ClusterParameters[nElements] : new ::ClusterParameters[nElements];
   }
   // Wrapper around operator delete
   static void delete_ClusterParameters(void *p) {
      delete ((::ClusterParameters*)p);
   }
   static void deleteArray_ClusterParameters(void *p) {
      delete [] ((::ClusterParameters*)p);
   }
   static void destruct_ClusterParameters(void *p) {
      typedef ::ClusterParameters current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ClusterParameters

/********************************************************
* /home/llr/ilc/jeans/marlinTest/GARLIC_v2-0/src/ClusterParametersDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableClusterParametersDict();

extern "C" void G__set_cpp_environmentClusterParametersDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/home/llr/ilc/jeans/marlinTest/GARLIC_v2-0/include/ClusterParameters.hh");
  G__cpp_reset_tagtableClusterParametersDict();
}
#include <new>
extern "C" int G__cpp_dllrevClusterParametersDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ClusterParameters */
static int G__ClusterParametersDict_83_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ClusterParameters* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new ClusterParameters[n];
     } else {
       p = new((void*) gvp) ClusterParameters[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new ClusterParameters;
     } else {
       p = new((void*) gvp) ClusterParameters;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__ClusterParametersDictLN_ClusterParameters);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClusterParametersDict_83_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ClusterParameters::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClusterParametersDict_83_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ClusterParameters::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClusterParametersDict_83_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ClusterParameters::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClusterParametersDict_83_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ClusterParameters::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClusterParametersDict_83_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ClusterParameters*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClusterParametersDict_83_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ClusterParameters::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClusterParametersDict_83_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ClusterParameters::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClusterParametersDict_83_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ClusterParameters::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClusterParametersDict_83_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ClusterParameters::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClusterParametersDict_83_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ClusterParameters* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ClusterParameters(*(ClusterParameters*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__ClusterParametersDictLN_ClusterParameters);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ClusterParameters G__TClusterParameters;
static int G__ClusterParametersDict_83_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (ClusterParameters*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ClusterParameters*) (soff+(sizeof(ClusterParameters)*i)))->~G__TClusterParameters();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (ClusterParameters*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((ClusterParameters*) (soff))->~G__TClusterParameters();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClusterParametersDict_83_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ClusterParameters* dest = (ClusterParameters*) G__getstructoffset();
   *dest = *(ClusterParameters*) libp->para[0].ref;
   const ClusterParameters& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ClusterParameters */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncClusterParametersDict {
 public:
  G__Sizep2memfuncClusterParametersDict(): p(&G__Sizep2memfuncClusterParametersDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncClusterParametersDict::*p)();
};

size_t G__get_sizep2memfuncClusterParametersDict()
{
  G__Sizep2memfuncClusterParametersDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceClusterParametersDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClusterParametersDictLN_ClusterParameters))) {
     ClusterParameters *G__Lderived;
     G__Lderived=(ClusterParameters*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClusterParametersDictLN_ClusterParameters),G__get_linked_tagnum(&G__ClusterParametersDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableClusterParametersDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ClusterParameters */
static void G__setup_memvarClusterParameters(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClusterParametersDictLN_ClusterParameters));
   { ClusterParameters *p; p=(ClusterParameters*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ID)-(long)(p)),105,0,0,-1,-1,-1,1,"ID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),100,0,0,-1,-1,-1,1,"theta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),100,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Etot)-(long)(p)),100,0,0,-1,-1,-1,1,"Etot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Etot_g)-(long)(p)),100,0,0,-1,-1,-1,1,"Etot_g=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Etot_g_noLC)-(long)(p)),100,0,0,-1,-1,-1,1,"Etot_g_noLC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Etot_g_phi)-(long)(p)),100,0,0,-1,-1,-1,1,"Etot_g_phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Etot_g_theta)-(long)(p)),100,0,0,-1,-1,-1,1,"Etot_g_theta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Etot_g_pos)-(long)(p)),100,0,0,-1,-1,-1,1,"Etot_g_pos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_GeV)-(long)(p)),100,0,0,-1,-1,-1,1,"E_GeV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_GeV_pre)-(long)(p)),100,0,0,-1,-1,-1,1,"E_GeV_pre=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_GeV_pre_noPhi)-(long)(p)),100,0,0,-1,-1,-1,1,"E_GeV_pre_noPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_GeV_noLC)-(long)(p)),100,0,0,-1,-1,-1,1,"E_GeV_noLC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_GeV_noTheta)-(long)(p)),100,0,0,-1,-1,-1,1,"E_GeV_noTheta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_GeV_noPhi)-(long)(p)),100,0,0,-1,-1,-1,1,"E_GeV_noPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_GeV_en)-(long)(p)),100,0,0,-1,-1,-1,1,"E_GeV_en=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_GeV_hits)-(long)(p)),100,0,0,-1,-1,-1,1,"E_GeV_hits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_GeV_mix)-(long)(p)),100,0,0,-1,-1,-1,1,"E_GeV_mix=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_GeV_opt)-(long)(p)),100,0,0,-1,-1,-1,1,"E_GeV_opt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Es1)-(long)(p)),100,0,0,-1,-1,-1,1,"Es1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Es2)-(long)(p)),100,0,0,-1,-1,-1,1,"Es2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Es3)-(long)(p)),100,0,0,-1,-1,-1,1,"Es3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EnPs)-(long)(p)),100,0,0,-1,-1,-1,1,"EnPs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->En1odd)-(long)(p)),100,0,0,-1,-1,-1,1,"En1odd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->En1even)-(long)(p)),100,0,0,-1,-1,-1,1,"En1even=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->En2odd)-(long)(p)),100,0,0,-1,-1,-1,1,"En2odd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->En2even)-(long)(p)),100,0,0,-1,-1,-1,1,"En2even=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NPs)-(long)(p)),100,0,0,-1,-1,-1,1,"NPs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->N1odd)-(long)(p)),100,0,0,-1,-1,-1,1,"N1odd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->N1even)-(long)(p)),100,0,0,-1,-1,-1,1,"N1even=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->N2odd)-(long)(p)),100,0,0,-1,-1,-1,1,"N2odd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->N2even)-(long)(p)),100,0,0,-1,-1,-1,1,"N2even=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->start)-(long)(p)),100,0,0,-1,-1,-1,1,"start=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->end)-(long)(p)),100,0,0,-1,-1,-1,1,"end=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->depth)-(long)(p)),100,0,0,-1,-1,-1,1,"depth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->COGx)-(long)(p)),100,0,0,-1,-1,-1,1,"COGx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->COGy)-(long)(p)),100,0,0,-1,-1,-1,1,"COGy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->COGz)-(long)(p)),100,0,0,-1,-1,-1,1,"COGz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->POSx)-(long)(p)),100,0,0,-1,-1,-1,1,"POSx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->POSy)-(long)(p)),100,0,0,-1,-1,-1,1,"POSy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->POSz)-(long)(p)),100,0,0,-1,-1,-1,1,"POSz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->distToBiggest)-(long)(p)),100,0,0,-1,-1,-1,1,"distToBiggest=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->smallestDistToBiggest)-(long)(p)),100,0,0,-1,-1,-1,1,"smallestDistToBiggest=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->distFirstCell)-(long)(p)),100,0,0,-1,-1,-1,1,"distFirstCell=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->distToTrack)-(long)(p)),100,0,0,-1,-1,-1,1,"distToTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->smallestDistToTrack)-(long)(p)),100,0,0,-1,-1,-1,1,"smallestDistToTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E9C)-(long)(p)),100,0,0,-1,-1,-1,1,"E9C=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E4C)-(long)(p)),100,0,0,-1,-1,-1,1,"E4C=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E1C)-(long)(p)),100,0,0,-1,-1,-1,1,"E1C=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Chi2_long)-(long)(p)),100,0,0,-1,-1,-1,1,"Chi2_long=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nGhostHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nGhostHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zone)-(long)(p)),105,0,0,-1,-1,-1,1,"zone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->psHits)-(long)(p)),105,0,0,-1,-1,-1,1,"psHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pl0Hits)-(long)(p)),105,0,0,-1,-1,-1,1,"pl0Hits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hitDensity)-(long)(p)),100,0,0,-1,-1,-1,1,"hitDensity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->enDensity)-(long)(p)),100,0,0,-1,-1,-1,1,"enDensity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dirErr)-(long)(p)),100,0,0,-1,-1,-1,1,"dirErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->seedDirErr)-(long)(p)),100,0,0,-1,-1,-1,1,"seedDirErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Eccentricity)-(long)(p)),100,0,0,-1,-1,-1,1,"Eccentricity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Width)-(long)(p)),100,0,0,-1,-1,-1,1,"Width=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonProb)-(long)(p)),100,0,0,-1,-1,-1,1,"photonProb=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonProbMult)-(long)(p)),100,0,0,-1,-1,-1,1,"photonProbMult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bckgrndProbMult)-(long)(p)),100,0,0,-1,-1,-1,1,"bckgrndProbMult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->signalProbMult)-(long)(p)),100,0,0,-1,-1,-1,1,"signalProbMult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->surroundingLayers)-(long)(p)),105,0,0,-1,-1,-1,1,"surroundingLayers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->particleID)-(long)(p)),105,0,0,-1,-1,-1,1,"particleID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isReal)-(long)(p)),103,0,0,-1,-1,-1,1,"isReal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MLP)-(long)(p)),100,0,0,-1,-1,-1,1,"MLP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->finalCut)-(long)(p)),100,0,0,-1,-1,-1,1,"finalCut=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Volume)-(long)(p)),100,0,0,-1,-1,-1,1,"Volume=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->AssTo)-(long)(p)),105,0,0,-1,-1,-1,1,"AssTo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__ClusterParametersDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarClusterParametersDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncClusterParameters(void) {
   /* ClusterParameters */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClusterParametersDictLN_ClusterParameters));
   G__memfunc_setup("ClusterParameters",1782,G__ClusterParametersDict_83_0_1, 105, G__get_linked_tagnum(&G__ClusterParametersDictLN_ClusterParameters), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClusterParametersDict_83_0_2, 85, G__get_linked_tagnum(&G__ClusterParametersDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&ClusterParameters::Class), 0);
   G__memfunc_setup("Class_Name",982,G__ClusterParametersDict_83_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&ClusterParameters::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__ClusterParametersDict_83_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&ClusterParameters::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__ClusterParametersDict_83_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&ClusterParameters::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClusterParametersDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClusterParametersDict_83_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClusterParametersDict_83_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&ClusterParameters::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClusterParametersDict_83_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&ClusterParameters::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClusterParametersDict_83_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&ClusterParameters::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClusterParametersDict_83_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&ClusterParameters::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("ClusterParameters", 1782, G__ClusterParametersDict_83_0_14, (int) ('i'), G__get_linked_tagnum(&G__ClusterParametersDictLN_ClusterParameters), -1, 0, 1, 1, 1, 0, "u 'ClusterParameters' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ClusterParameters", 1908, G__ClusterParametersDict_83_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClusterParametersDict_83_0_16, (int) ('u'), G__get_linked_tagnum(&G__ClusterParametersDictLN_ClusterParameters), -1, 1, 1, 1, 1, 0, "u 'ClusterParameters' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncClusterParametersDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalClusterParametersDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcClusterParametersDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ClusterParametersDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ClusterParametersDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ClusterParametersDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ClusterParametersDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ClusterParametersDictLN_ClusterParameters = { "ClusterParameters" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableClusterParametersDict() {
  G__ClusterParametersDictLN_TClass.tagnum = -1 ;
  G__ClusterParametersDictLN_TBuffer.tagnum = -1 ;
  G__ClusterParametersDictLN_TMemberInspector.tagnum = -1 ;
  G__ClusterParametersDictLN_TObject.tagnum = -1 ;
  G__ClusterParametersDictLN_ClusterParameters.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableClusterParametersDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ClusterParametersDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__ClusterParametersDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ClusterParametersDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ClusterParametersDictLN_TObject);
   G__tagtable_setup(G__get_linked_tagnum(&G__ClusterParametersDictLN_ClusterParameters),sizeof(ClusterParameters),-1,95488,(char*)NULL,G__setup_memvarClusterParameters,G__setup_memfuncClusterParameters);
}
extern "C" void G__cpp_setupClusterParametersDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupClusterParametersDict()");
  G__set_cpp_environmentClusterParametersDict();
  G__cpp_setup_tagtableClusterParametersDict();

  G__cpp_setup_inheritanceClusterParametersDict();

  G__cpp_setup_typetableClusterParametersDict();

  G__cpp_setup_memvarClusterParametersDict();

  G__cpp_setup_memfuncClusterParametersDict();
  G__cpp_setup_globalClusterParametersDict();
  G__cpp_setup_funcClusterParametersDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncClusterParametersDict();
  return;
}
class G__cpp_setup_initClusterParametersDict {
  public:
    G__cpp_setup_initClusterParametersDict() { G__add_setup_func("ClusterParametersDict",(G__incsetup)(&G__cpp_setupClusterParametersDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initClusterParametersDict() { G__remove_setup_func("ClusterParametersDict"); }
};
G__cpp_setup_initClusterParametersDict G__cpp_setup_initializerClusterParametersDict;

