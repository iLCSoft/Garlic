//
// File generated by /opt/exp_soft/ilc/LOCAL_LLR/ilcsoft/v01-06/root/5.16.00/bin/rootcint at Wed Jul 21 12:27:02 2010

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MCPhotonDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MCPhoton_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCPhoton(void *p = 0);
   static void *newArray_MCPhoton(Long_t size, void *p);
   static void delete_MCPhoton(void *p);
   static void deleteArray_MCPhoton(void *p);
   static void destruct_MCPhoton(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCPhoton*)
   {
      ::MCPhoton *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCPhoton >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCPhoton", ::MCPhoton::Class_Version(), "/home/llr/ilc/jeans/marlinTest/GARLIC_v2-0/include/MCPhoton.hh", 7,
                  typeid(::MCPhoton), DefineBehavior(ptr, ptr),
                  &::MCPhoton::Dictionary, isa_proxy, 1,
                  sizeof(::MCPhoton) );
      instance.SetNew(&new_MCPhoton);
      instance.SetNewArray(&newArray_MCPhoton);
      instance.SetDelete(&delete_MCPhoton);
      instance.SetDeleteArray(&deleteArray_MCPhoton);
      instance.SetDestructor(&destruct_MCPhoton);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCPhoton*)
   {
      return GenerateInitInstanceLocal((::MCPhoton*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCPhoton*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MCPhoton::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCPhoton::Class_Name()
{
   return "MCPhoton";
}

//______________________________________________________________________________
const char *MCPhoton::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCPhoton*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCPhoton::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCPhoton*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCPhoton::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCPhoton*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCPhoton::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCPhoton*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MCPhoton::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCPhoton.
      TClass *R__cl = ::MCPhoton::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "cosTheta", &cosTheta);
      R__insp.Inspect(R__cl, R__parent, "phi", &phi);
      R__insp.Inspect(R__cl, R__parent, "Etot", &Etot);
      R__insp.Inspect(R__cl, R__parent, "E_GeV", &E_GeV);
      R__insp.Inspect(R__cl, R__parent, "RecEnRatio", &RecEnRatio);
      R__insp.Inspect(R__cl, R__parent, "nHits", &nHits);
      R__insp.Inspect(R__cl, R__parent, "zone", &zone);
      R__insp.Inspect(R__cl, R__parent, "interaction", &interaction);
      R__insp.Inspect(R__cl, R__parent, "rec", &rec);
      R__insp.Inspect(R__cl, R__parent, "smallestDistToTrack", &smallestDistToTrack);
      R__insp.Inspect(R__cl, R__parent, "distToTrack", &distToTrack);
      R__insp.Inspect(R__cl, R__parent, "smallestDistToNextPhoton", &smallestDistToNextPhoton);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCPhoton(void *p) {
      return  p ? new(p) ::MCPhoton : new ::MCPhoton;
   }
   static void *newArray_MCPhoton(Long_t nElements, void *p) {
      return p ? new(p) ::MCPhoton[nElements] : new ::MCPhoton[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCPhoton(void *p) {
      delete ((::MCPhoton*)p);
   }
   static void deleteArray_MCPhoton(void *p) {
      delete [] ((::MCPhoton*)p);
   }
   static void destruct_MCPhoton(void *p) {
      typedef ::MCPhoton current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCPhoton

/********************************************************
* /home/llr/ilc/jeans/marlinTest/GARLIC_v2-0/src/MCPhotonDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableMCPhotonDict();

extern "C" void G__set_cpp_environmentMCPhotonDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/home/llr/ilc/jeans/marlinTest/GARLIC_v2-0/include/MCPhoton.hh");
  G__cpp_reset_tagtableMCPhotonDict();
}
#include <new>
extern "C" int G__cpp_dllrevMCPhotonDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MCPhoton */
static int G__MCPhotonDict_83_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCPhoton* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCPhoton[n];
     } else {
       p = new((void*) gvp) MCPhoton[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCPhoton;
     } else {
       p = new((void*) gvp) MCPhoton;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCPhotonDictLN_MCPhoton);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCPhotonDict_83_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCPhoton::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCPhotonDict_83_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCPhoton::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCPhotonDict_83_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCPhoton::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCPhotonDict_83_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCPhoton::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCPhotonDict_83_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCPhoton*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCPhotonDict_83_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCPhoton::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCPhotonDict_83_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCPhoton::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCPhotonDict_83_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCPhoton::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCPhotonDict_83_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCPhoton::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCPhotonDict_83_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCPhoton* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCPhoton(*(MCPhoton*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCPhotonDictLN_MCPhoton);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCPhoton G__TMCPhoton;
static int G__MCPhotonDict_83_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCPhoton*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCPhoton*) (soff+(sizeof(MCPhoton)*i)))->~G__TMCPhoton();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCPhoton*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCPhoton*) (soff))->~G__TMCPhoton();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCPhotonDict_83_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCPhoton* dest = (MCPhoton*) G__getstructoffset();
   *dest = *(MCPhoton*) libp->para[0].ref;
   const MCPhoton& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MCPhoton */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMCPhotonDict {
 public:
  G__Sizep2memfuncMCPhotonDict(): p(&G__Sizep2memfuncMCPhotonDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMCPhotonDict::*p)();
};

size_t G__get_sizep2memfuncMCPhotonDict()
{
  G__Sizep2memfuncMCPhotonDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMCPhotonDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCPhotonDictLN_MCPhoton))) {
     MCPhoton *G__Lderived;
     G__Lderived=(MCPhoton*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCPhotonDictLN_MCPhoton),G__get_linked_tagnum(&G__MCPhotonDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMCPhotonDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MCPhoton */
static void G__setup_memvarMCPhoton(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCPhotonDictLN_MCPhoton));
   { MCPhoton *p; p=(MCPhoton*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->cosTheta)-(long)(p)),102,0,0,-1,-1,-1,1,"cosTheta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Etot)-(long)(p)),102,0,0,-1,-1,-1,1,"Etot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_GeV)-(long)(p)),102,0,0,-1,-1,-1,1,"E_GeV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RecEnRatio)-(long)(p)),102,0,0,-1,-1,-1,1,"RecEnRatio=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zone)-(long)(p)),105,0,0,-1,-1,-1,1,"zone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->interaction)-(long)(p)),103,0,0,-1,-1,-1,1,"interaction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rec)-(long)(p)),103,0,0,-1,-1,-1,1,"rec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->smallestDistToTrack)-(long)(p)),102,0,0,-1,-1,-1,1,"smallestDistToTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->distToTrack)-(long)(p)),102,0,0,-1,-1,-1,1,"distToTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->smallestDistToNextPhoton)-(long)(p)),102,0,0,-1,-1,-1,1,"smallestDistToNextPhoton=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCPhotonDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMCPhotonDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMCPhoton(void) {
   /* MCPhoton */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCPhotonDictLN_MCPhoton));
   G__memfunc_setup("MCPhoton",776,G__MCPhotonDict_83_0_1, 105, G__get_linked_tagnum(&G__MCPhotonDictLN_MCPhoton), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCPhotonDict_83_0_2, 85, G__get_linked_tagnum(&G__MCPhotonDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCPhoton::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCPhotonDict_83_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCPhoton::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCPhotonDict_83_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCPhoton::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCPhotonDict_83_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCPhoton::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MCPhotonDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCPhotonDict_83_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCPhotonDict_83_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCPhoton::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCPhotonDict_83_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCPhoton::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCPhotonDict_83_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCPhoton::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCPhotonDict_83_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCPhoton::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCPhoton", 776, G__MCPhotonDict_83_0_14, (int) ('i'), G__get_linked_tagnum(&G__MCPhotonDictLN_MCPhoton), -1, 0, 1, 1, 1, 0, "u 'MCPhoton' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCPhoton", 902, G__MCPhotonDict_83_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCPhotonDict_83_0_16, (int) ('u'), G__get_linked_tagnum(&G__MCPhotonDictLN_MCPhoton), -1, 1, 1, 1, 1, 0, "u 'MCPhoton' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMCPhotonDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMCPhotonDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMCPhotonDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MCPhotonDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MCPhotonDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MCPhotonDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MCPhotonDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MCPhotonDictLN_MCPhoton = { "MCPhoton" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMCPhotonDict() {
  G__MCPhotonDictLN_TClass.tagnum = -1 ;
  G__MCPhotonDictLN_TBuffer.tagnum = -1 ;
  G__MCPhotonDictLN_TMemberInspector.tagnum = -1 ;
  G__MCPhotonDictLN_TObject.tagnum = -1 ;
  G__MCPhotonDictLN_MCPhoton.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMCPhotonDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MCPhotonDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MCPhotonDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MCPhotonDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MCPhotonDictLN_TObject);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCPhotonDictLN_MCPhoton),sizeof(MCPhoton),-1,95488,(char*)NULL,G__setup_memvarMCPhoton,G__setup_memfuncMCPhoton);
}
extern "C" void G__cpp_setupMCPhotonDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMCPhotonDict()");
  G__set_cpp_environmentMCPhotonDict();
  G__cpp_setup_tagtableMCPhotonDict();

  G__cpp_setup_inheritanceMCPhotonDict();

  G__cpp_setup_typetableMCPhotonDict();

  G__cpp_setup_memvarMCPhotonDict();

  G__cpp_setup_memfuncMCPhotonDict();
  G__cpp_setup_globalMCPhotonDict();
  G__cpp_setup_funcMCPhotonDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMCPhotonDict();
  return;
}
class G__cpp_setup_initMCPhotonDict {
  public:
    G__cpp_setup_initMCPhotonDict() { G__add_setup_func("MCPhotonDict",(G__incsetup)(&G__cpp_setupMCPhotonDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMCPhotonDict() { G__remove_setup_func("MCPhotonDict"); }
};
G__cpp_setup_initMCPhotonDict G__cpp_setup_initializerMCPhotonDict;

