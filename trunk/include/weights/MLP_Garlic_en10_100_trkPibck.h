// Class: ReadMLP_Garlic_en10_100_trkPibck
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : MLP::MLP_Garlic_en10_100_trkPibck
TMVA Release   : 4.0.7         [262151]
ROOT Release   : 5.27/06       [334598]
Creator        : jeans
Date           : Tue Jan 10 15:21:19 2012
Host           : Linux polui07.in2p3.fr 2.6.18-194.26.1.el5 #1 SMP Tue Nov 9 12:46:16 EST 2010 x86_64 x86_64 x86_64 GNU/Linux
Dir            : /grid_mnt/vol__vol1__u/llr/ilc/jeans/marlinTest_v01-10/steering
Training events: 6806
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
NCycles: "500" [Number of training cycles]
HiddenLayers: "N+1" [Specification of hidden layer architecture]
NeuronType: "tanh" [Neuron activation function type]
RandomSeed: "1" [Random seed for initial synapse weights (0 means unique seed for each run; default value '1')]
EstimatorType: "MSE" [MSE (Mean Square Estimator) for Gaussian Likelihood or CE(Cross-Entropy) for Bernoulli Likelihood]
NeuronInputType: "sum" [Neuron input function type]
V: "True" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
VerbosityLevel: "Verbose" [Verbosity level]
VarTransform: "G" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "False" [Print method-specific help message]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
TrainingMethod: "BP" [Train with Back-Propagation (BP), BFGS Algorithm (BFGS), or Genetic Algorithm (GA - slower and worse)]
LearningRate: "2.000000e-02" [ANN learning rate parameter]
DecayRate: "1.000000e-02" [Decay rate for learning parameter]
TestRate: "5" [Test for overtraining performed at each #th epochs]
EpochMonitoring: "False" [Provide epoch-wise monitoring plots according to TestRate (caution: causes big ROOT output file!)]
Sampling: "1.000000e+00" [Only 'Sampling' (randomly selected) events are trained each epoch]
SamplingEpoch: "1.000000e+00" [Sampling is used for the first 'SamplingEpoch' epochs, afterwards, all events are taken for training]
SamplingImportance: "1.000000e+00" [ The sampling weights of events in epochs which successful (worse estimator than before) are multiplied with SamplingImportance, else they are divided.]
SamplingTraining: "True" [The training sample is sampled]
SamplingTesting: "False" [The testing sample is sampled]
ResetStep: "50" [How often BFGS should reset history]
Tau: "3.000000e+00" [LineSearch "size step"]
BPMode: "sequential" [Back-propagation learning mode: sequential or batch]
BatchSize: "-1" [Batch size: number of events/batch, only set if in Batch Mode, -1 for BatchSize=number_of_events]
ConvergenceImprove: "1.000000e-30" [Minimum improvement which counts as improvement (<0 means automatic convergence check is turned off)]
ConvergenceTests: "-1" [Number of steps (without improvement) required for convergence (<0 means automatic convergence check is turned off)]
UseRegulator: "False" [Use regulator to avoid over-training]
UpdateLimit: "10" [Number of updates for regulator before stop training]
# Default:
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 9
dirErr                        dirErr                        dirErr                        dirErr                                                          'F'    [0,0.453857094049]
depth                         depth                         depth                         depth                                                           'F'    [2.91022610664,22.1920719147]
enFracRel_x0_10               enFracRel_x0_10               enFracRel_x0_10               enFracRel_x0_10                                                 'F'    [0.00365909747779,0.948767662048]
hitsMeanEn                    hitsMeanEn                    hitsMeanEn                    hitsMeanEn                                                      'F'    [0.0228204708546,0.179594829679]
hitsRMSEn/hitsMeanEn          hitsRMSEn_D_hitsMeanEn        hitsRMSEn/hitsMeanEn          hitsRMSEn/hitsMeanEn                                            'F'    [0.944875061512,6.09679841995]
fracDim4                      fracDim4                      fracDim4                      fracDim4                                                        'F'    [0.44654238224,1.30203568935]
transRMSmin                   transRMSmin                   transRMSmin                   transRMSmin                                                     'F'    [2.49533128738,11.9027862549]
distToTrackPOS                distToTrackPOS                distToTrackPOS                distToTrackPOS                                                  'F'    [0.151158317924,99.9779663086]
angleToTrackPOS               angleToTrackPOS               angleToTrackPOS               angleToTrackPOS                                                 'F'    [0,2.42443656921]
NSpec 0


============================================================================ */

#include <vector>
#include <cmath>
#include <string>
#include <iostream>
#include <Rtypes.h>

#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   Bool_t IsStatusClean() const { return fStatusIsClean; }

 protected:

   Bool_t fStatusIsClean;
};

#endif

class ReadMLP_Garlic_en10_100_trkPibck : public IClassifierReader {

 public:

   // constructor
   ReadMLP_Garlic_en10_100_trkPibck( std::vector<std::string>& theInputVars ) 
      : IClassifierReader(),
        fClassName( "ReadMLP_Garlic_en10_100_trkPibck" ),
        fNvars( 9 ),
        fIsNormalised( false )
   {      
      // the training input variables
      const char* inputVars[] = { "dirErr", "depth", "enFracRel_x0_10", "hitsMeanEn", "hitsRMSEn/hitsMeanEn", "fracDim4", "transRMSmin", "distToTrackPOS", "angleToTrackPOS" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = -3.75167512893677;
      fVmax[0] = 5.73072862625122;
      fVmin[1] = -3.1679539680481;
      fVmax[1] = 5.73072862625122;
      fVmin[2] = -3.48919272422791;
      fVmax[2] = 3.28628993034363;
      fVmin[3] = -3.16952610015869;
      fVmax[3] = 5.73072862625122;
      fVmin[4] = -3.51351737976074;
      fVmax[4] = 5.73072862625122;
      fVmin[5] = -3.07447004318237;
      fVmax[5] = 3.54806733131409;
      fVmin[6] = -5.73072862625122;
      fVmax[6] = 5.73072862625122;
      fVmin[7] = -4.00018215179443;
      fVmax[7] = 5.73072862625122;
      fVmin[8] = -3.16985702514648;
      fVmax[8] = 5.73072862625122;

      // initialize input variable types
      fType[0] = 'F';
      fType[1] = 'F';
      fType[2] = 'F';
      fType[3] = 'F';
      fType[4] = 'F';
      fType[5] = 'F';
      fType[6] = 'F';
      fType[7] = 'F';
      fType[8] = 'F';

      // initialize constants
      Initialize();

      // initialize transformation
      InitTransform();
   }

   // destructor
   virtual ~ReadMLP_Garlic_en10_100_trkPibck() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the 
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const;

 private:

   // method-specific destructor
   void Clear();

   // input variable transformation

   double  cumulativeDist[9][3][1001];
   double xmin[9][3];
   double xmax[9][3];
   void InitTransform_1();
   void Transform_1( std::vector<double> & iv, int sigOrBgd ) const;
   void InitTransform();
   void Transform( std::vector<double> & iv, int sigOrBgd ) const;

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   const Bool_t fIsNormalised;
   Bool_t IsNormalised() const { return fIsNormalised; }
   double fVmin[9];
   double fVmax[9];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[9];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)

   double ActivationFnc(double x) const;
   double OutputActivationFnc(double x) const;

   int fLayers;
   int fLayerSize[3];
   double fWeightMatrix0to1[11][10];   // weight matrix from layer 0 to 1
   double fWeightMatrix1to2[1][11];   // weight matrix from layer 1 to 2

   double * fWeights[3];
};
